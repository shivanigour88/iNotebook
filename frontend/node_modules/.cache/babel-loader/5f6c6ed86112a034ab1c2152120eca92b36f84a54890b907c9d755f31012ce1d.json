{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\reactLearn\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport NoteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const initialNotes = [];\n  const [notes, setNotes] = useState(initialNotes);\n\n  //Get all Notes\n  const getNotes = async () => {\n    //API call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    //setNotes()\n  };\n\n  //ADD a Note\n  const addNote = async (title, description, tag) => {\n    //API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    console.log(\"Adding a new note\");\n    const note = {\n      \"_id\": \"663dc5d6e85b3537c6677f23af7b\",\n      \"user\": \"663d328453ffc66153aad4a5\",\n      \"title\": title,\n      \"description\": description,\n      \"tag\": tag,\n      \"date\": \"2024-05-10T06:59:34.821Z\",\n      \"__v\": 0\n    };\n    setNotes(notes.concat(note));\n  };\n  //Delete a Note\n  const deleteNote = id => {\n    //Todo API call\n    console.log(\"Deleting a new note\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  //Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    //API call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    //Logic to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title, element.description = description, element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"FwnHZK6cGhoeGRFLNSXOw+yrj+o=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","initialNotes","notes","setNotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/reactLearn/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import React from \"react\";\r\nimport NoteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState  = (props) => {\r\n       const host = \"http://localhost:5000\"\r\n      const initialNotes = []\r\n      const[notes , setNotes] = useState(initialNotes);\r\n\r\n      \r\n      //Get all Notes\r\n      const getNotes = async()=>{\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n          method: \"GET\", \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\",\r\n          },\r\n        });\r\n        const json = await response.json();\r\n          console.log(json);\r\n          //setNotes()\r\n      }\r\n\r\n\r\n      //ADD a Note\r\n      const addNote = async(title , description , tag)=>{\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/addnote`, {\r\n          method: \"POST\", \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\",\r\n          },\r\n          body: JSON.stringify({title , description ,tag}) \r\n        });\r\n\r\n        console.log(\"Adding a new note\");\r\n       const note = {\r\n          \"_id\": \"663dc5d6e85b3537c6677f23af7b\",\r\n          \"user\": \"663d328453ffc66153aad4a5\",\r\n          \"title\": title,\r\n          \"description\": description,\r\n          \"tag\": tag,\r\n          \"date\": \"2024-05-10T06:59:34.821Z\",\r\n          \"__v\": 0\r\n        }\r\n        setNotes(notes.concat(note));\r\n      }\r\n      //Delete a Note\r\n      const deleteNote = (id)=>{\r\n        //Todo API call\r\n        console.log(\"Deleting a new note\" +id);\r\n        const newNotes = notes.filter((note)=>{return note._id!== id})\r\n        setNotes(newNotes);\r\n\r\n      }\r\n      //Edit a Note\r\n      const editNote = async(id , title,description , tag)=>{\r\n        //API call\r\n        const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n          method: \"POST\", \r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"auth-token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjYzZDMyODQ1M2ZmYzY2MTUzYWFkNGE1In0sImlhdCI6MTcxNTMxNzU0N30.Y8ZdecVTjLQYCaS-wz_fyLEmtOAzvnX2IEvYddP6irE\",\r\n          },\r\n          body: JSON.stringify({title , description ,tag}) \r\n        });\r\n        const json =  await response.json(); \r\n        //Logic to edit in client\r\n        for(let index =0 ; index<notes.length ; index++)\r\n          {\r\n            const element = notes[index];\r\n            if(element._id === id)\r\n              {\r\n                element.title = title,\r\n                element.description = description,\r\n                element.tag = tag\r\n              }\r\n          }\r\n      }\r\n\r\nreturn(\r\n    <NoteContext.Provider value = {{notes , addNote , deleteNote,editNote ,getNotes}}>\r\n        {props.children}\r\n    </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}